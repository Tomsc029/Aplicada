# Sección 1: Diccionarios básicos
def mostrar_diccionarios_basicos():
    # Crea un diccionario que mapea habitaciones con sus temperaturas
    sensors = {"living room": 21, "kitchen": 23, "bedroom": 20, "pantry": 22}
    print(sensors)  # Imprime el diccionario de sensores de temperatura
    
    # Crea un diccionario que mapea ubicaciones con el número de cámaras
    num_cameras = {"backyard": 6, "garage": 2, "driveway": 1}
    print(num_cameras)  # Imprime el diccionario de cámaras
    
    # Crea un diccionario de traducciones inglés-élfico
    translations = {"mountain": "orod", "bread": "bass", "friend": "mellon", "horse": "roch"}
    print(translations)  # Imprime el diccionario de traducciones

# Sección 2: Diccionarios anidados y vacíos
def mostrar_diccionarios_anidados_y_vacios():
    # Crea un diccionario anidado donde las claves son apellidos y los valores son listas de nombres
    children = {
        "von Trapp": ["Johannes", "Rosmarie", "Eleonore"],  # Lista de hijos von Trapp
        "Corleone": ["Sonny", "Fredo", "Michael"]  # Lista de hijos Corleone
    }
    print(children)  # Imprime el diccionario de familias e hijos
    
    # Crea un diccionario vacío usando llaves vacías
    my_empty_dictionary = {}
    print(my_empty_dictionary)  # Imprime el diccionario vacío

# Sección 3: Agregar y modificar valores
def modificar_diccionarios():
    # Crea un diccionario de menú con platos y sus precios
    menu = {"oatmeal": 3, "avocado toast": 6, "carrot juice": 5, "blueberry muffin": 2}
    print("Before:", menu)  # Muestra el menú original
    
    # Agrega un nuevo elemento al diccionario usando notación de corchetes
    menu["cheesecake"] = 8
    print("After:", menu)  # Muestra el menú después de agregar cheesecake
    
    # Crea un diccionario con un solo animal
    animals_in_zoo = {"horses": 2}
    print(animals_in_zoo)  # Imprime el diccionario de animales
    
    # Crea un diccionario de sensores
    sensors = {"living room": 21, "kitchen": 23, "bedroom": 20}
    print("Before:", sensors)  # Muestra los sensores originales
    
    # Usa update() para agregar múltiples elementos al diccionario de una vez
    sensors.update({"pantry": 22, "guest room": 25, "patio": 34})
    print("After:", sensors)  # Muestra los sensores después de la actualización
    
    # Crea un diccionario de IDs de usuario
    user_ids = {"teraCoder": 9018293, "proProgrammer": 119238}
    print(user_ids)  # Imprime los IDs originales
    
    # Usa update() para agregar más usuarios al diccionario
    user_ids.update({"theLooper": 138475, "stringQueen": 85739})
    print(user_ids)  # Imprime todos los IDs después de la actualización

# Sección 4: Sobrescribir valores
def sobrescribir_valores():
    # Crea un diccionario de menú
    menu = {"oatmeal": 3, "avocado toast": 6, "carrot juice": 5, "blueberry muffin": 2}
    print("Before:", menu)  # Muestra el menú original
    
    # Sobrescribe el valor de "oatmeal" usando notación de corchetes
    menu["oatmeal"] = 5
    print("After:", menu)  # Muestra el menú con el precio actualizado
    
    # Crea un diccionario de ganadores del Oscar
    oscar_winners = {
        "Best Picture": "La La Land",
        "Best Actor": "Casey Affleck", 
        "Best Actress": "Emma Stone",
        "Animated Feature": "Zootopia"
    }
    print("Before:", oscar_winners)  # Muestra los ganadores originales
    
    # Usa update() para agregar una nueva categoría
    oscar_winners.update({"Supporting Actress": "Viola Davis"})
    print("After1:", oscar_winners)  # Muestra después de agregar nueva categoría
    
    # Corrige el ganador de "Best Picture" sobrescribiendo el valor
    oscar_winners["Best Picture"] = "Moonlight"
    print("After2:", oscar_winners)  # Muestra la corrección final

# Sección 5: Crear diccionarios con zip() y comprensión
def crear_diccionarios_con_zip():
    # Crea listas paralelas de nombres y alturas
    names = ["Jenny", "Alexus", "Sam", "Grace"]
    heights = [61, 70, 67, 64]
    
    # Usa zip() y comprensión de diccionario para crear un diccionario nombre:altura
    students = {key: value for key, value in zip(names, heights)}
    print(students)  # Imprime el diccionario de estudiantes y alturas
    
    # Crea listas paralelas de bebidas y cafeína
    drinks = ["espresso", "chai", "decaf", "drip"]
    caffeine = [64, 40, 0, 120]
    
    # Combina las listas en un diccionario usando zip() y comprensión
    drinks_to_caffeine = {key: value for key, value in zip(drinks, caffeine)}
    print(drinks_to_caffeine)  # Imprime el diccionario de bebidas y cafeína

# Sección 6: Diccionario de canciones y biblioteca musical
def canciones_y_biblioteca():
    # Crea una lista de nombres de canciones
    songs = ["Like a Rolling Stone", "Satisfaction", "Imagine", "What's Going On", "Respect", "Good Vibrations"]
    # Crea una lista de números de reproducciones correspondientes
    playcounts = [78, 29, 44, 21, 89, 5]
    
    # Combina las listas en un diccionario canción:reproducciones
    plays = {key: value for key, value in zip(songs, playcounts)}
    print(plays)  # Imprime el diccionario de reproducciones
    
    # Agrega una nueva canción con 1 reproducción
    plays.update({"Purple Haze": 1})
    # Actualiza el número de reproducciones de "Respect"
    plays.update({"Respect": 94})
    print("After:", plays)  # Muestra el diccionario actualizado
    
    # Crea una biblioteca musical anidada con diferentes playlists
    library = {
        "The Best Songs": plays,  # Una playlist con el diccionario de reproducciones
        "Sunday Feelings": {}     # Una playlist vacía
    }
    print(library)  # Imprime toda la biblioteca musical

# Función principal que ejecuta todas las demostraciones
def main():
    mostrar_diccionarios_basicos()           # Ejecuta ejemplos básicos
    mostrar_diccionarios_anidados_y_vacios()  # Ejecuta ejemplos anidados y vacíos
    modificar_diccionarios()                 # Ejecuta ejemplos de modificación
    sobrescribir_valores()                   # Ejecuta ejemplos de sobrescritura
    crear_diccionarios_con_zip()             # Ejecuta ejemplos con zip()
    canciones_y_biblioteca()                 # Ejecuta ejemplo de biblioteca musical

# Punto de entrada del programa - ejecuta main() solo si el archivo se ejecuta directamente
if __name__ == "__main__":
    main()  # Llama a la función principal
